# Working with Vectors
# functions
total <- function(a, b) {
a + b
}
product <- function(x, y) {
prod <- x * y
return (prod)
}
reverse <- function(v) {
sort(v, decreasing = TRUE) -> revVector
return (revVector)
}
# creating vctors
v1 = c(4, 12, 10)
v2 <- 2:4
seq(6,8) -> v3
# Applications
print(reverse(v1))
print(v1)
cat("v1 + v2 + v3 = ", total(total(v1, v2), v3), "\n")
print("Product of v2 and v3 is : %d", product(v2, v3))
# Working with Vectors
# functions
total <- function(a, b) {
a + b
}
product <- function(x, y) {
prod = x*y
return (prod)
}
reverse <- function(v) {
sort(v, decreasing = TRUE) -> revVector
return (revVector)
}
# creating vctors
v1 = c(4, 12, 10)
v2 <- 2:4
seq(6,8) -> v3
# Applications
print(reverse(v1))
print(v1)
cat("v1 + v2 + v3 = ", total(total(v1, v2), v3), "\n")
sprintf("Product of v2 and v3 is : %d", product(v2, v3))
# Working with Vectors
# functions
total <- function(a, b) {
a + b
}
product <- function(x, y) {
prod = x*y
return (prod)
}
reverse <- function(v) {
sort(v, decreasing = TRUE) -> revVector
return (revVector)
}
# creating vctors
v1 = c(4, 12, 10)
v2 <- 2:4
seq(6,8) -> v3
# Applications
print(reverse(v1))
print(v1)
cat("v1 + v2 + v3 = ", total(total(v1, v2), v3), "\n")
sprintf("Product of v2 and v3 is : %c", product(v2, v3))
# Working with Vectors
# functions
total <- function(a, b) {
a + b
}
product <- function(x, y) {
prod = x*y
return (prod)
}
reverse <- function(v) {
sort(v, decreasing = TRUE) -> revVector
return (revVector)
}
# creating vctors
v1 = c(4, 12, 10)
v2 <- 2:4
seq(6,8) -> v3
# Applications
print(reverse(v1))
print(v1)
cat("v1 + v2 + v3 = ", total(total(v1, v2), v3), "\n")
sprintf("Product of v2 and v3 is : \n %d", product(v2, v3))
# Working with Vectors
# functions
total <- function(a, b) {
a + b
}
product <- function(x, y) {
prod = x*y
return (prod)
}
reverse <- function(v) {
sort(v, decreasing = TRUE) -> revVector
return (revVector)
}
# creating vctors
v1 = c(4, 12, 10)
v2 <- 2:4
seq(6,8) -> v3
# Applications
print(reverse(v1))
print(v1)
cat("v1 + v2 + v3 = ", total(total(v1, v2), v3), "\n")
print(v2*v3)
sprintf("Product of v2 and v3 is : %d", product(v2, v3))
# Working with Vectors
# functions
total <- function(a, b) {
a + b
}
product <- function(x, y) {
prod = x*y
return (prod)
}
reverse <- function(v) {
sort(v, decreasing = TRUE) -> revVector
return (revVector)
}
# creating vctors
v1 = c(4, 12, 10)
v2 <- 2:4
seq(6,8) -> v3
# Applications
print(reverse(v1))
print(v1)
cat("v1 + v2 + v3 = ", total(total(v1, v2), v3), "\n")
print(product(v2, v3))
sprintf("Product of v2 and v3 is : %d", product(v2, v3))
# Working with Vectors
# functions
total <- function(a, b) {
a + b
}
product <- function(x, y) {
prod = x*y
return (prod)
}
reverse <- function(v) {
sort(v, decreasing = TRUE) -> revVector
return (revVector)
}
# creating vctors
v1 = c(4, 12, 10)
v2 <- 2:4
seq(6,8) -> v3
# Applications
print("Displaying vector v1:")
print(reverse(v1))
sprintf("Sum of values in v1 = %d", sum(v1))
cat("v1 + v2 + v3 = ", total(total(v1, v2), v3), "\n")
cat("Product of v2 and v3 is : ", product(v2, v3), "\n")
# Working with Vectors
# functions
total <- function(a, b) {
a + b
}
product <- function(x, y) {
prod = x*y
return (prod)
}
reverse <- function(v) {
sort(v, decreasing = TRUE) -> revVector
return (revVector)
}
# creating vctors
v1 = c(4, 12, 10)
v2 <- 2:4
seq(6,8) -> v3
# Applications
cat("v1 = ", v1)
cat("v2 = ", v2)
cat("v3 = ", v3)
print("Displaying vector v1 in reverse order:")
print(reverse(v1))
sprintf("Sum of values in v1 = %d", sum(v1))
cat("v1 + v2 + v3 = ", total(total(v1, v2), v3), "\n")
cat("Product of v2 and v3 is : ", product(v2, v3), "\n")
# Working with Vectors
# functions
total <- function(a, b) {
a + b
}
product <- function(x, y) {
prod = x*y
return (prod)
}
reverse <- function(v) {
sort(v, decreasing = TRUE) -> revVector
return (revVector)
}
# creating vctors
v1 = c(4, 12, 10)
v2 <- 2:4
seq(6,8) -> v3
# Applications
cat("v1 = ", v1, "\n")
cat("v2 = ", v2, "\n")
cat("v3 = ", v3, "\n")
print("Displaying vector v1 in reverse order:")
print(reverse(v1))
sprintf("Sum of values in v1 = %d", sum(v1))
cat("v1 + v2 + v3 = ", total(total(v1, v2), v3), "\n")
cat("Product of v2 and v3 is : ", product(v2, v3), "\n")
# Working with Vectors
# functions
total <- function(a, b) {
a + b
}
product <- function(x, y) {
prod = x*y
return (prod)
}
reverse <- function(v) {
sort(v, decreasing = TRUE) -> revVector
return (revVector)
}
# creating vctors
v1 = c(4, 12, 10)
v2 <- 2:4
seq(6,8) -> v3
# Applications
cat("v1 = ", v1, "\n")
cat("v2 = ", v2, "\n")
cat("v3 = ", v3, "\n")
print("Displaying vector v2 in reverse order:")
print(reverse(v2))
sprintf("Sum of values in v1 = %d", sum(v1))
cat("v1 + v2 + v3 = ", total(total(v1, v2), v3), "\n")
cat("Product of v2 and v3 is : ", product(v2, v3), "\n")
# Working with Vectors
# functions
total <- function(a, b) {
a + b
}
product <- function(x, y) {
prod = x*y
return (prod)
}
reverse <- function(v) {
sort(v, decreasing = TRUE) -> revVector
return (revVector)
}
# creating vctors
v1 = c(4, 12, 10)
v2 <- 2:4
seq(6,8) -> v3
# Applications
cat("v1 = ", v1, "\n")
cat("v2 = ", v2, "\n")
cat("v3 = ", v3, "\n")
print("Displaying vector v1 in reverse order:")
print(reverse(v1))
sprintf("Sum of values in v2 = %d", sum(v2))
cat("v1 + v2 + v3 = ", total(total(v1, v2), v3), "\n")
cat("Product of v2 and v3 is : ", product(v2, v3), "\n")
source('~/Documents/Data Science/dataTypes.R')
source('~/Documents/Data Science/dataTypes.R')
source('~/Documents/Data Science/rTutorials.R')
source('~/Documents/Data Science/rTutorials.R')
source('~/Documents/Data Science/rTutorials.R')
source('~/Documents/Data Science/rTutorials.R')
source('~/Documents/Data Science/rTutorials.R')
source('~/Documents/Data Science/rTutorials.R')
source('~/Documents/Data Science/rTutorials.R')
source('~/Documents/Data Science/rTutorials.R')
q()
a <- c("good","better","best")
a <- c("good","better","best","better","best", "good","better")
f <- factor(a)
f
nlevels(f)
d <- data.frame(n=c("ram","mohan"),g=c("m","m"),age=c(21,22),rollnumber=c(1,2))
d
head(d)
tail(d)
?head
head(d, n=1)
tail(d, n=1)
d$age
class(d$age)
d[age]
d["age"]
d[[age]]
d[["age"]]
class(d[["age"]])
d[2,]
d[2,1]
d[,1]
plot(d$age)
library(tidyverse)
plot(d)
attach(d)
plot(age)
x = matrix(2:5, 2:5, nrow = 2, ncol = 2)
x
y = t(x)
x%o%y
getwd()
source('~/Documents/Data-Science/R-Programming/matrices.R')
source('~/Documents/Data-Science/R-Programming/matrices.R')
source('~/Documents/Data-Science/R-Programming/matrices.R')
source('~/Documents/Data-Science/R-Programming/matrices.R')
?matrix()
uhbubu
library(tidyverse)
?ggplot()
head(mpg)
ggplot(data=mpg, mapping = aes(x=ct, y=hwy)) + geom_point()
ggplot(data=mpg, mapping = aes(x=cty, y=hwy)) + geom_point()
ggplot(data=mpg, mapping = aes(x=displ, y=hwy)) + geom_point()
var <- 10
var
print(var)
class(var)
as.integer(var)
class(as.integer(var))
""
class("")
v <- vector(mode="integer", length=10)
v
for(i in 1:10) {}
for(i in 1:10) {print(i)}
for(i in 1:10) {
v[i] = i
}
v
for(i in 1:10) {
if((i mod 2) == 0) {
?rbind()
source('~/Documents/Data-Science/R-Programming/dataTypes.R')
apple <- c('red','green',"yellow")
print(apple)
source('~/Documents/Data-Science/R-Programming/dataframe.R')
View(d1)
View(d2)
source('~/Documents/Data-Science/R-Programming/dataframe.R')
source('~/Documents/Data-Science/R-Programming/dataframe.R')
View(d1)
View(d2)
?seq()
?example(seq())
?cbind()
source('~/Documents/Data-Science/R-Programming/dataframe.R')
source('~/Documents/Data-Science/R-Programming/dataframe.R')
source('~/Documents/Data-Science/R-Programming/dataframe.R')
source('~/Documents/Data-Science/R-Programming/dataframe.R')
source('~/Documents/Data-Science/R-Programming/dataframe.R')
source('~/Documents/Data-Science/R-Programming/dataframe.R')
source('~/Documents/Data-Science/R-Programming/dataframe.R')
source('~/Documents/Data-Science/R-Programming/dataframe.R')
source('~/Documents/Data-Science/R-Programming/dataframe.R')
source('~/Documents/Data-Science/R-Programming/dataframe.R')
rbind(d1, d2)
source('~/Documents/Data-Science/R-Programming/dataframe.R')
source('~/Documents/Data-Science/R-Programming/dataframe.R')
rbind(d1, d2)
source('~/Documents/Data-Science/R-Programming/dataframe.R')
source('~/Documents/Data-Science/R-Programming/dataframe.R')
source('~/Documents/Data-Science/R-Programming/dataframe.R')
View(CD)
View(RD)
source('~/Documents/Data-Science/R-Programming/basic/factorial.R')
x
1*2*3*4*5*6*7
source('~/Documents/Data-Science/R-Programming/basic/factorial.R')
source('~/Documents/Data-Science/R-Programming/basic/fibs.R')
source('~/Documents/Data-Science/R-Programming/basic/fibs.R')
source('~/Documents/Data-Science/R-Programming/basic/fibs.R')
?input()
?readline()
source('~/Documents/Data-Science/R-Programming/basic/fibs.R')
source('~/Documents/Data-Science/R-Programming/basic/fibs.R')
source('~/Documents/Data-Science/R-Programming/basic/fibs.R')
n <- readline(prompt = "Enter no. of terms for fibonacci numbers: ")
n <- readline(prompt = "Enter no. of terms for fibonacci numbers: ")
n
source('~/Documents/Data-Science/R-Programming/basic/fibs.R')
source('~/Documents/Data-Science/R-Programming/basic/fibs.R')
source('~/Documents/Data-Science/R-Programming/basic/fibs.R')
arr <- array(c('green','yellow'),dim = c(2,3,3))
print(arr)
arr <- array(c('green','yellow'),dim = c(2,3,3))
arr
df <- data.frame(
classes = c("XII-A", "XII-B"),
def = c('Science', 'Commerce'),
techSub = c('C.S.', 'I.P.'),
lang = c('C++', 'Java')
)
print(df)
df <- data.frame(
classes = c("XII-A", "XII-B"),
def = c('Science', 'Commerce'),
techSub = c('C.S.', 'I.P.'),
lang = c('C++', 'Java')
)
df
source('~/Documents/Data-Science/R-Programming/dataframe.R')
d1 <- data.frame(
consumerID = c(9, 2, 3, 7, 5, 6),
Name = c(rep("Lakme", 3), "Elle", "Elle", "Elle")
)
d2 <- data.frame(
consumerID = c(11:16),
Name = c("Ponds", "Ponds", "Nivea", "Nivea", rep(c("Ponds"), 2))
)
###################
RD <- rbind(d1, d2) # appends row-wise
CD <- cbind(d1, d2) # appends column-wise
source('~/Documents/Data-Science/R-Programming/dataframe.R')
d1 <- data.frame(
consumerID = c(9, 2, 3, 7, 5, 6),
Name = c(rep("Lakme", 3), "Elle", "Elle", "Elle")
)
d2 <- data.frame(
consumerID = c(11:16),
Name = c("Ponds", "Ponds", "Nivea", "Nivea", rep(c("Ponds"), 2))
)
d2
d1 <- data.frame(
consumerID = c(9, 2, 3, 7, 5, 6),
Name = c(rep("Lakme", 3), "Elle", "Elle", "Elle")
)
d2 <- data.frame(
consumerID = c(11:16),
Name = c("Ponds", "Ponds", "Nivea", "Nivea", rep(c("Ponds"), 2))
)
###################
RD <- rbind(d1, d2) # appends row-wise
CD <- cbind(d1, d2) # appends column-wise
RD
?read()
?read.csv()
source('~/Documents/Data-Science/R-Programming/main/plot.R')
getwd()
setwd("/home/ravi/Documents/Data-Science/R-Programming/main/olympics.csv")
source('~/Documents/Data-Science/R-Programming/lists.R')
source('~/Documents/Data-Science/R-Programming/main/plot.R')
source('~/Documents/Data-Science/R-Programming/main/plot.R')
source('~/Documents/Data-Science/R-Programming/main/plot.R')
source('~/Documents/Data-Science/R-Programming/main/plot.R')
?head()
source('~/Documents/Data-Science/R-Programming/main/plot.R')
View(df)
install.packages("twitteR")
install.packages("ROAuth")
install.packages("ROAuth")
source('~/Documents/Data-Science/R-Programming/preprocessing.R')
source('~/Documents/Data-Science/R-Programming/preprocessing.R')
x
source('~/Documents/Data-Science/R-Programming/preprocessing.R')
View(air)
View(air)
class(x)
x[Ozone,Median]
x[1,1]
x['Ozone','Median']
x['Ozone','Median']nually
View(air)
source('~/Documents/Data-Science/R-Programming/preprocessing.R')
source('~/Documents/Data-Science/R-Programming/preprocessing.R')
source('~/Documents/Data-Science/R-Programming/preprocessing.R')
?median()
source('~/Documents/Data-Science/R-Programming/preprocessing.R')
source('~/Documents/Data-Science/R-Programming/preprocessing.R')
source('~/Documents/Data-Science/R-Programming/preprocessing.R')
?median()
?ifelse()
source('~/Documents/Data-Science/R-Programming/preprocessing.R')
source('~/Documents/Data-Science/R-Programming/preprocessing.R')
air
package.install("lattic")
package.install("lattice")
?gsub()
source('~/Documents/Data-Science/R-Programming/dataframe.R')
source('~/Documents/Data-Science/R-Programming/dataframe.R')
View(d)
source('~/Documents/Data-Science/R-Programming/dataframe.R')
source('~/Documents/Data-Science/R-Programming/dataframe.R')
source('~/Documents/Data-Science/R-Programming/dataframe.R')
source('~/Documents/Data-Science/R-Programming/dataframe.R')
source('~/Documents/Data-Science/R-Programming/dataframe.R')
source('~/Documents/Data-Science/R-Programming/dataframe.R')
d
source('~/Documents/Data-Science/R-Programming/dataframe.R')
d
source('~/Documents/Data-Science/R-Programming/preprocessing.R')
?aes()
source('~/Documents/Data-Science/Titanic/titanic.R')
source('~/Documents/Data-Science/R-Programming/preprocessing.R')
source('~/Documents/Data-Science/R-Programming/preprocessing.R')
source('~/Documents/Data-Science/R-Programming/preprocessing.R')
source('~/Documents/Data-Science/R-Programming/preprocessing.R')
source('~/Documents/Data-Science/R-Programming/preprocessing.R')
source('~/Documents/Data-Science/R-Programming/preprocessing.R')
source('~/Documents/Data-Science/R-Programming/preprocessing.R')
source('~/Documents/Data-Science/R-Programming/preprocessing.R', echo=TRUE)
source('~/Documents/Data-Science/Twitter/tweets.R', echo=TRUE)
source('~/Documents/Data-Science/Twitter/tweets.R', echo=TRUE)
source('~/Documents/Data-Science/Twitter/tweets.R', echo=TRUE)
View(T.df)
cls
.
?twitterR
View(T.df)
source('~/Documents/Data-Science/Project/My Work/datasets.R', echo=TRUE)
