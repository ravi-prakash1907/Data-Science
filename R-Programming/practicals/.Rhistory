# functions
total <- function(a, b) {
a + b
}
product <- function(x, y) {
prod = x*y
return (prod)
}
reverse <- function(v) {
sort(v, decreasing = TRUE) -> revVector
return (revVector)
}
# creating vctors
v1 = c(4, 12, 10)
v2 <- 2:4
seq(6,8) -> v3
# Applications
print("Displaying vector v1:")
print(reverse(v1))
sprintf("Sum of values in v1 = %d", sum(v1))
cat("v1 + v2 + v3 = ", total(total(v1, v2), v3), "\n")
cat("Product of v2 and v3 is : ", product(v2, v3), "\n")
# Working with Vectors
# functions
total <- function(a, b) {
a + b
}
product <- function(x, y) {
prod = x*y
return (prod)
}
reverse <- function(v) {
sort(v, decreasing = TRUE) -> revVector
return (revVector)
}
# creating vctors
v1 = c(4, 12, 10)
v2 <- 2:4
seq(6,8) -> v3
# Applications
cat("v1 = ", v1)
cat("v2 = ", v2)
cat("v3 = ", v3)
print("Displaying vector v1 in reverse order:")
print(reverse(v1))
sprintf("Sum of values in v1 = %d", sum(v1))
cat("v1 + v2 + v3 = ", total(total(v1, v2), v3), "\n")
cat("Product of v2 and v3 is : ", product(v2, v3), "\n")
# Working with Vectors
# functions
total <- function(a, b) {
a + b
}
product <- function(x, y) {
prod = x*y
return (prod)
}
reverse <- function(v) {
sort(v, decreasing = TRUE) -> revVector
return (revVector)
}
# creating vctors
v1 = c(4, 12, 10)
v2 <- 2:4
seq(6,8) -> v3
# Applications
cat("v1 = ", v1, "\n")
cat("v2 = ", v2, "\n")
cat("v3 = ", v3, "\n")
print("Displaying vector v1 in reverse order:")
print(reverse(v1))
sprintf("Sum of values in v1 = %d", sum(v1))
cat("v1 + v2 + v3 = ", total(total(v1, v2), v3), "\n")
cat("Product of v2 and v3 is : ", product(v2, v3), "\n")
# Working with Vectors
# functions
total <- function(a, b) {
a + b
}
product <- function(x, y) {
prod = x*y
return (prod)
}
reverse <- function(v) {
sort(v, decreasing = TRUE) -> revVector
return (revVector)
}
# creating vctors
v1 = c(4, 12, 10)
v2 <- 2:4
seq(6,8) -> v3
# Applications
cat("v1 = ", v1, "\n")
cat("v2 = ", v2, "\n")
cat("v3 = ", v3, "\n")
print("Displaying vector v2 in reverse order:")
print(reverse(v2))
sprintf("Sum of values in v1 = %d", sum(v1))
cat("v1 + v2 + v3 = ", total(total(v1, v2), v3), "\n")
cat("Product of v2 and v3 is : ", product(v2, v3), "\n")
# Working with Vectors
# functions
total <- function(a, b) {
a + b
}
product <- function(x, y) {
prod = x*y
return (prod)
}
reverse <- function(v) {
sort(v, decreasing = TRUE) -> revVector
return (revVector)
}
# creating vctors
v1 = c(4, 12, 10)
v2 <- 2:4
seq(6,8) -> v3
# Applications
cat("v1 = ", v1, "\n")
cat("v2 = ", v2, "\n")
cat("v3 = ", v3, "\n")
print("Displaying vector v1 in reverse order:")
print(reverse(v1))
sprintf("Sum of values in v2 = %d", sum(v2))
cat("v1 + v2 + v3 = ", total(total(v1, v2), v3), "\n")
cat("Product of v2 and v3 is : ", product(v2, v3), "\n")
source('~/Documents/Data Science/dataTypes.R')
source('~/Documents/Data Science/dataTypes.R')
source('~/Documents/Data Science/rTutorials.R')
source('~/Documents/Data Science/rTutorials.R')
source('~/Documents/Data Science/rTutorials.R')
source('~/Documents/Data Science/rTutorials.R')
source('~/Documents/Data Science/rTutorials.R')
source('~/Documents/Data Science/rTutorials.R')
source('~/Documents/Data Science/rTutorials.R')
source('~/Documents/Data Science/rTutorials.R')
q()
a <- c("good","better","best")
a <- c("good","better","best","better","best", "good","better")
f <- factor(a)
f
nlevels(f)
d <- data.frame(n=c("ram","mohan"),g=c("m","m"),age=c(21,22),rollnumber=c(1,2))
d
head(d)
tail(d)
?head
head(d, n=1)
tail(d, n=1)
d$age
class(d$age)
d[age]
d["age"]
d[[age]]
d[["age"]]
class(d[["age"]])
d[2,]
d[2,1]
d[,1]
plot(d$age)
library(tidyverse)
plot(d)
attach(d)
plot(age)
x = matrix(2:5, 2:5, nrow = 2, ncol = 2)
x
y = t(x)
x%o%y
getwd()
source('~/Documents/Data-Science/R-Programming/matrices.R')
source('~/Documents/Data-Science/R-Programming/matrices.R')
source('~/Documents/Data-Science/R-Programming/matrices.R')
source('~/Documents/Data-Science/R-Programming/matrices.R')
?matrix()
uhbubu
library(tidyverse)
?ggplot()
head(mpg)
ggplot(data=mpg, mapping = aes(x=ct, y=hwy)) + geom_point()
ggplot(data=mpg, mapping = aes(x=cty, y=hwy)) + geom_point()
ggplot(data=mpg, mapping = aes(x=displ, y=hwy)) + geom_point()
var <- 10
var
print(var)
class(var)
as.integer(var)
class(as.integer(var))
""
class("")
v <- vector(mode="integer", length=10)
v
for(i in 1:10) {}
for(i in 1:10) {print(i)}
for(i in 1:10) {
v[i] = i
}
v
for(i in 1:10) {
if((i mod 2) == 0) {
?rbind()
source('~/Documents/Data-Science/R-Programming/dataTypes.R')
apple <- c('red','green',"yellow")
print(apple)
source('~/Documents/Data-Science/R-Programming/dataframe.R')
View(d1)
View(d2)
source('~/Documents/Data-Science/R-Programming/dataframe.R')
source('~/Documents/Data-Science/R-Programming/dataframe.R')
View(d1)
View(d2)
?seq()
?example(seq())
?cbind()
source('~/Documents/Data-Science/R-Programming/dataframe.R')
source('~/Documents/Data-Science/R-Programming/dataframe.R')
source('~/Documents/Data-Science/R-Programming/dataframe.R')
source('~/Documents/Data-Science/R-Programming/dataframe.R')
source('~/Documents/Data-Science/R-Programming/dataframe.R')
source('~/Documents/Data-Science/R-Programming/dataframe.R')
source('~/Documents/Data-Science/R-Programming/dataframe.R')
source('~/Documents/Data-Science/R-Programming/dataframe.R')
source('~/Documents/Data-Science/R-Programming/dataframe.R')
source('~/Documents/Data-Science/R-Programming/dataframe.R')
rbind(d1, d2)
source('~/Documents/Data-Science/R-Programming/dataframe.R')
source('~/Documents/Data-Science/R-Programming/dataframe.R')
rbind(d1, d2)
source('~/Documents/Data-Science/R-Programming/dataframe.R')
source('~/Documents/Data-Science/R-Programming/dataframe.R')
source('~/Documents/Data-Science/R-Programming/dataframe.R')
View(CD)
View(RD)
source('~/Documents/Data-Science/R-Programming/basic/factorial.R')
x
1*2*3*4*5*6*7
source('~/Documents/Data-Science/R-Programming/basic/factorial.R')
source('~/Documents/Data-Science/R-Programming/basic/fibs.R')
source('~/Documents/Data-Science/R-Programming/basic/fibs.R')
source('~/Documents/Data-Science/R-Programming/basic/fibs.R')
?input()
?readline()
source('~/Documents/Data-Science/R-Programming/basic/fibs.R')
source('~/Documents/Data-Science/R-Programming/basic/fibs.R')
source('~/Documents/Data-Science/R-Programming/basic/fibs.R')
n <- readline(prompt = "Enter no. of terms for fibonacci numbers: ")
n <- readline(prompt = "Enter no. of terms for fibonacci numbers: ")
n
source('~/Documents/Data-Science/R-Programming/basic/fibs.R')
source('~/Documents/Data-Science/R-Programming/basic/fibs.R')
source('~/Documents/Data-Science/R-Programming/basic/fibs.R')
arr <- array(c('green','yellow'),dim = c(2,3,3))
print(arr)
arr <- array(c('green','yellow'),dim = c(2,3,3))
arr
df <- data.frame(
classes = c("XII-A", "XII-B"),
def = c('Science', 'Commerce'),
techSub = c('C.S.', 'I.P.'),
lang = c('C++', 'Java')
)
print(df)
df <- data.frame(
classes = c("XII-A", "XII-B"),
def = c('Science', 'Commerce'),
techSub = c('C.S.', 'I.P.'),
lang = c('C++', 'Java')
)
df
source('~/Documents/Data-Science/R-Programming/dataframe.R')
d1 <- data.frame(
consumerID = c(9, 2, 3, 7, 5, 6),
Name = c(rep("Lakme", 3), "Elle", "Elle", "Elle")
)
d2 <- data.frame(
consumerID = c(11:16),
Name = c("Ponds", "Ponds", "Nivea", "Nivea", rep(c("Ponds"), 2))
)
###################
RD <- rbind(d1, d2) # appends row-wise
CD <- cbind(d1, d2) # appends column-wise
source('~/Documents/Data-Science/R-Programming/dataframe.R')
d1 <- data.frame(
consumerID = c(9, 2, 3, 7, 5, 6),
Name = c(rep("Lakme", 3), "Elle", "Elle", "Elle")
)
d2 <- data.frame(
consumerID = c(11:16),
Name = c("Ponds", "Ponds", "Nivea", "Nivea", rep(c("Ponds"), 2))
)
d2
d1 <- data.frame(
consumerID = c(9, 2, 3, 7, 5, 6),
Name = c(rep("Lakme", 3), "Elle", "Elle", "Elle")
)
d2 <- data.frame(
consumerID = c(11:16),
Name = c("Ponds", "Ponds", "Nivea", "Nivea", rep(c("Ponds"), 2))
)
###################
RD <- rbind(d1, d2) # appends row-wise
CD <- cbind(d1, d2) # appends column-wise
RD
?read()
?read.csv()
source('~/Documents/Data-Science/R-Programming/main/plot.R')
getwd()
setwd("/home/ravi/Documents/Data-Science/R-Programming/main/olympics.csv")
source('~/Documents/Data-Science/R-Programming/lists.R')
source('~/Documents/Data-Science/R-Programming/main/plot.R')
source('~/Documents/Data-Science/R-Programming/main/plot.R')
source('~/Documents/Data-Science/R-Programming/main/plot.R')
source('~/Documents/Data-Science/R-Programming/main/plot.R')
?head()
source('~/Documents/Data-Science/R-Programming/main/plot.R')
View(df)
# loading
train <- read.csv("CSV/train.csv")
test <- read.csv("CSV/test.csv")
# Add servived
test.survived <- data.frame(test[,1], Survived = rep("None", nrow(test)), test[,2:11])
names(test.survived)[1] <- names(train[1])
# joining data sets
data.combined <- rbind(train, test.survived)
# working with some R datatypes
str(data.combined)
data.combined$Survived <- as.factor(data.combined$Survived)
data.combined$Pclass <- as.factor(data.combined$Pclass)
# gross servival rate for titanic disaster ---> a table
table(data.combined$Survived)
# distribution accross classes of passengers
table(data.combined$Pclass)
library(ggplot2)
# pay more, get higher place, be closer to life bags   --->
#   checking no of people in 3 classes and no of survivers
#train$Survived <- as.factor(train$Survived)
#train$Pclass <- as.factor(train$Pclass)
table(train$Pclass)
table(train$Survived)
### plotting  ###
# devision of survivers in each class
ggplot(train, aes(x = Pclass, fill = factor(Survived))) +
geom_histogram(binwidth = 0.5) +
xlab("Pclass") +
ylab("Total Count") +
labs(fill = "Survived")
# separation of classes based of survival
ggplot(train, aes(x = Survived, fill = factor(Pclass))) +
geom_histogram(binwidth = 0.5) +
xlab("Survived") +
ylab("Total Count") +
labs(fill = "Pclass")
# dealing with names in training dataset
head(as.character(train$Name))
length(as.character(data.combined$Name))            # 1309
length(unique(as.character(data.combined$Name)))    # 1307    ----->  unique
# here we have 2 duplicate names
# extract (2) duplicate names
dup.names <- as.character(data.combined[which(duplicated(as.character(data.combined$Name))), "Name"])
#     ----->  unique vs duplicate
# look all records having duplicate names
data.combined[which(data.combined$Name %in% dup.names),]
# work on string data
library(stringr)
# devision based on sex & marital status (title)
misses <- data.combined[which(str_detect(data.combined$Name, "Miss.")),]
mrses <- data.combined[which(str_detect(data.combined$Name, "Mrs.")),]
masters <- data.combined[which(str_detect(data.combined$Name, "Master.")),]
misters <- data.combined[which(str_detect(data.combined$Name, "Mr.")),]
head(misses)
females <- data.combined[which(data.combined$Sex == "female"),]
males <- data.combined[which(data.combined$Sex == "male"),]
head(females)
head(males)
# relation b/w title and Survival as well as Pclass
# extract all the possible titles
get.titles <- function(name) {
name = as.character(name)
# can use switch too
if(length(grep("Miss.", name)) > 0) {
return("Miss.")
} else if(length(grep("Mrs.", name)) > 0) {
return("Mrs.")
} else if(length(grep("Master.", name)) > 0) {
return("Master.")
} else if(length(grep("Mr.", name)) > 0) {
return("Mr.")
} else {
return("Other")
}
}
# relation b/w title and Survival as well as Pclass
# extract all the possible titles
get.titles <- function(name) {
name = as.character(name)
# can use switch too
if(length(grep("Miss.", name)) > 0) {
return("Miss.")
} else if(length(grep("Mrs.", name)) > 0) {
return("Mrs.")
} else if(length(grep("Master.", name)) > 0) {
return("Master.")
} else if(length(grep("Mr.", name)) > 0) {
return("Mr.")
} else {
return("Other")
}
}
# creating a vector for all titles to append as a new column
all.titles <- NULL
for (i in 1:nrow(data.combined)) {
all.titles <- c(all.titles, get.titles(data.combined[i, "Name"]))
}
data.combined$Titles <- as.factor(all.titles) # appending new 'title' column
nlevels(data.combined$Titles)                 # no of all titles
# visualization       --->      servival per class for every title
#  Differentiate b/w histogram and bargraph, after running the plot, below
ggplot(data.combined[1:819,], aes(x = Titles, fill = Survived)) +
geom_bar(width = 0.5) +
facet_wrap(~Pclass) +
ggtitle("Pclass") +
xlab("Titles") +
ylab("Total") +
labs(fill = "Survived")
train <- read.csv("CSV/train.csv")
test <- read.csv("CSV/test.csv")
setwd("/home/ravi/Documents/Data-Science/R-Programming/practicals/")
source('~/Documents/Data-Science/R-Programming/practicals/p1.R')
source('~/Documents/Data-Science/R-Programming/practicals/p1.R')
source('~/Documents/Data-Science/R-Programming/practicals/p2.R')
source('~/Documents/Data-Science/R-Programming/practicals/p3.R')
View(table)
source('~/Documents/Data-Science/R-Programming/practicals/p3.R')
source('~/Documents/Data-Science/R-Programming/practicals/p3.R')
View(t)
source('~/Documents/Data-Science/R-Programming/practicals/p3.R')
View(t)
View(table)
source('~/Documents/Data-Science/R-Programming/practicals/p3.R')
source('~/Documents/Data-Science/R-Programming/practicals/p3.R')
source('~/Documents/Data-Science/R-Programming/practicals/p3.R')
source('~/Documents/Data-Science/R-Programming/practicals/p3.R', echo=TRUE)
source('~/Documents/Data-Science/R-Programming/practicals/p3.R', echo=TRUE)
source('~/Documents/Data-Science/R-Programming/practicals/p3.R')
View(table)
source('~/Documents/Data-Science/R-Programming/practicals/p3.R', echo=TRUE)
source('~/Documents/Data-Science/R-Programming/practicals/p3.R')
View(table)
source('~/Documents/Data-Science/R-Programming/practicals/p3.R')
View(table)
source('~/Documents/Data-Science/R-Programming/practicals/p3.R', echo=TRUE)
source('~/Documents/Data-Science/R-Programming/practicals/p3.R')
source('~/Documents/Data-Science/R-Programming/practicals/p3.R', echo=TRUE)
class(table)
source('~/Documents/Data-Science/R-Programming/practicals/p3.R', echo=TRUE)
source('~/Documents/Data-Science/R-Programming/practicals/p3.R')
table
table
table <- matrix(table, nrow = 12, ncol = 10)
View(table)
source('~/Documents/Data-Science/R-Programming/practicals/p3.R')
View(table)
source('~/Documents/Data-Science/R-Programming/practicals/p3.R')
View(table)
View(table)
source('~/Documents/Data-Science/R-Programming/practicals/p4.R')
source('~/Documents/Data-Science/R-Programming/practicals/p4.R', echo=TRUE)
source('~/Documents/Data-Science/R-Programming/practicals/p4.R')
source('~/Documents/Data-Science/R-Programming/practicals/p4.R')
source('~/Documents/Data-Science/R-Programming/practicals/p4.R')
t <- as.numeric(readline("Enter the number of elements in list: "))
sprintf("\nEnter %d numbers:\n", t)
source('~/Documents/Data-Science/R-Programming/practicals/p4.R')
t <- as.numeric(readline("Enter the number of elements in list: "))
sprintf("\nEnter %d numbers:\n", t)
source('~/Documents/Data-Science/R-Programming/practicals/p4.R')
source('~/Documents/Data-Science/R-Programming/practicals/p4.R', echo=TRUE)
t = as.numeric(8)
sprintf("\nEnter %d numbers:\n", t)
?max()
num = list(3, 8, 6, 4)
max(num)
num = list(3, 8, 6, 4)
max(as.vector(num))
num <- list(3, 8, 6, 4)
max(as.vector(num))
num <- list(3, 8, 6, 4)
max(as.vector(num))
num <- list(3, 8, 6, 4)
num
source('~/Documents/Data-Science/R-Programming/practicals/p5.R')
i
for (i in 1:length(l1)) {
i
sum = sum + l1[i]
runningTotal = c(runningTotal, sum)
}
sum = l1[i]
sum = 0
class(sum)
l1 <- list(2, 4, 6, 9)
l1[1]
class(l1[1])
for (i in 1:length(l1)) {
sum = sum + as.numeric(l1[i])
runningTotal = c(runningTotal, sum)
}
source('~/Documents/Data-Science/R-Programming/practicals/p5.R')
runningTotal
source('~/Documents/Data-Science/R-Programming/practicals/p5.R')
source('~/Documents/Data-Science/R-Programming/practicals/p5.R')
source('~/Documents/Data-Science/R-Programming/practicals/p6.R')
s[3]
